<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>ShopApp</title>
    <!-- TODO [GM]: Extract to respective bundles -->
    <script src="~/scripts/mustache.js/mustache.min.js"></script>
    <script src="~/scripts/jquery/jquery.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    @Styles.Render("~/Content/style.css")
    @Styles.Render("~/bundles/jquery-ui")

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tabulator/4.4.3/css/tabulator_site.min.css"/>
</head>
<body>

    <main>
        @this.Html.Partial("_Modal")

        <div id="loader-container" class="ui-widget-overlay ui-front">
            <div id="loader" class="loader"></div>
        </div>

        <section class="banner">
            <section>
                <div class="banner-icon">
                    <i class="fab fa-stripe-s fa-3x"></i>
                </div>
                <div class="banner-search-box">
                    <input id="search-box" type="text" class="text-center" placeholder="Search for a product..." />
                    <button class="shop-btn" type="button"><i class="fas fa-search fa-lg"></i></button>
                </div>
                <div class="banner-order-information">
                    <a href="javascript:void(0)">
                        <i class="fas fa-shopping-cart fa-2x"></i>
                    </a>
                </div>
            </section>
        </section>

        @this.Html.Partial("_MenuPartial")

        @this.RenderBody()

    </main>

    @this.Html.Partial("_FooterPartial")

    @this.RenderSection("scripts", required: false)
    @this.RenderSection("templates", required: false)

    @* ///////////////////////////// Templates *@

    <script id="checkout-partial-template" type="text/html">
        @this.Html.Partial("_CheckoutPartialTemplate")
    </script>

    <script id="product-details-template" type="text/html">
        @this.Html.Partial("_ProductDetailsPartialTemplate")
    </script>

    @* ///////////////////////////// Scripts *@

    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/tabulator/4.4.3/js/tabulator.min.js"></script>

    @Scripts.Render("~/bundles/modal")


    <script type="text/javascript">
        $(function () {
            // TODO: Extract to js file?
            $(document).ajaxStart(function () {
                $("#loader-container").show();
            });

            $(document).ajaxComplete(function () {
                $("#loader-container").hide();
            });

            @* Deleting the order's session storage after logout *@
            var logoutButton = $(".shop-nav").find("[shop-action='logout']");
            logoutButton.on("click", function () {
                window.sessionStorage.clear();
            });

            // Visualising the ordered elements count
            @if (this.User.Identity.IsAuthenticated)
            {
                 @: var cartElement = $(".banner .banner-order-information i");
                 @: cartElement.text(window.sessionStorage.length);
            }

            var checkoutCallback = function () {
                var _this = this;

                // TODO [GM]: Better way?
                var addressValidationField = $("#address-validation-field");
                if ($("#address").val().length == 0) {
                    addressValidationField.text("Invalid address.");
                    return;
                }

                addressValidationField.parent().hide();

                @*// clearing the session storage *@
                window.sessionStorage.clear();

                $("#checkout-table > tbody > tr").each(function (i, tr) {
                    var $tr = $(tr);

                    var productId = $tr.attr("shop-product-id");
                    var productName = $tr.children().first().text();
                    var productQuantity = $tr.children("td").eq(1).children("input[type='number']").val();

                    window.sessionStorage.setItem(productName, JSON.stringify({
                        productId: productId,
                        quantity: productQuantity
                    }));

                });

                $.ajax({
                    method: "POST",
                    url: "@this.Url.Action("Checkout", "Order")",
                    data: {
                        products: JSON.stringify(Object.keys(window.sessionStorage)
                            .map(function (productKey) {
                                var product = JSON.parse(window.sessionStorage[productKey]);

                                if (productKey !== "length") {
                                    return {
                                        ProductId: product.productId,
                                        Quantity: product.quantity,
                                        Address: $(".custom-modal [shop-role='order-address']").val(),
                                        Description: $(".custom-modal [shop-role='order-description']").val()
                                    };
                                }
                            })),
                    }
                })
                .then(function () {
                    @* clearing the session storage*@
                    window.sessionStorage.clear();

                    var cartElement = $(".banner .banner-order-information i");
                    cartElement.text(window.sessionStorage.length);

                    $(".custom-modal").find("[close-modal-btn]").click();
                })
                .fail(function () {
                    // TODO [GM]: Handle error properly, make error modal?
                    window.sessionStorage.clear();

                    var cartElement = $(".banner .banner-order-information i");
                    cartElement.text(window.sessionStorage.length);
                });
            };

            var checkoutButton = $(".banner .banner-order-information > a");
            checkoutButton.on("click", function (e) {
                e.preventDefault();

                var orders = Object.keys(window.sessionStorage)
                    .map(function (key) {
                        return {
                            name: key,
                            productId: JSON.parse(window.sessionStorage[key]).productId,
                            quantity: JSON.parse(window.sessionStorage[key]).quantity,
                            price: JSON.parse(window.sessionStorage[key]).price
                        };
                    });

                var totalPrice = 0;

                Array.from(orders).forEach(function (o) {
                    totalPrice += (parseFloat(o.quantity) * parseFloat(o.price));
                });

                @if (this.User.Identity.IsAuthenticated)
                {
                    @: var template = $("#checkout-partial-template").html();
                    @: var rendered = Mustache.render(template, { orders: orders, totalPrice: totalPrice.toFixed(2).toString() });

                    @: modalFunctions.openModal("Checkout", rendered, [{ Name: "Confirm", onClick: checkoutCallback }]);

                    @: var totalPriceElement = $(".custom-modal").find("[shop-order-total-price]");
                    @: var quantityFields = $(".custom-modal").find("[shop-product-id]").find("input[type='number']");

                    @: var changePrice = function changePrice(e) {
                    @:    var $element = $(e.currentTarget);

                    @:    var productId = $element.parent().parent().attr("shop-product-id");
                    @:    var productName = $element.parent().prev().text();
                    @:    var newQuantityValue = $element.val();
                    @:    var productPrice = JSON.parse(window.sessionStorage.getItem(productName)).price;

                    @:    window.sessionStorage.setItem(productName, JSON.stringify({ quantity: newQuantityValue, productId: productId, price: productPrice }));

                    @:    var newTotalPrice = 0;
                    @:    Object.keys(window.sessionStorage).forEach(function (k) {
                    @:        var product = JSON.parse(window.sessionStorage[k]);
                    @:           newTotalPrice += product.quantity * product.price;
                    @:    });

                    @:    if (newTotalPrice < 0) {
                    @:      newTotalPrice = 0;
                    @:    }

                    @:    totalPriceElement.text("$" + newTotalPrice.toFixed(2));
                    @: };

                    @: // changing the price dynamically
                    @: quantityFields.on("change", function (e) { changePrice(e); });

                    @: // removing the ordered products dynamically
                    @:$(".custom-modal").find("button[shop-action='remove-product']").on("click", function (e) {
                        // removing the session storage product items
                        @: var currentRow = $(this).closest("[shop-product-id]");
                        @: var productName = currentRow.children().first().text();

                        @: window.sessionStorage.removeItem(productName);

                        @: currentRow.remove();

                        @: // updating total price after removing an order
                        @: checkoutButton.click();

                        @: var cartElement = $(".banner .banner-order-information i");
                        @: cartElement.text(window.sessionStorage.length);
                    @:});
                }
                else
                {
                    @: window.location.href = "@this.Url.Action("Login", "Account")";
                }

            });
        });
    </script>

</body>
</html>