@model IEnumerable<CategoryViewModel>
@using Asp.Mvc.Web.Extensions.Web;

<section class="products-wrapper">
    <section class="products-wrapper-admin-toolbar">
        @if (this.User.Identity.IsAuthenticated)
        {
            if (this.User.IsInRole(RolesConstants.Administrator))
            {
                <button id="create-category" class="shop-btn" modal-btn type="button">Create</button>
            }
        }
    </section>
    <section class="product-categories">
        <header>Category</header>
        <section class="categories-list">
            <ul>
                @foreach (var category in this.Model)
                {
                    <li>@this.Html.Partial("_CategoryPartial", category)</li>
                }
            </ul>
        </section>
    </section>
    <section class="product-items">
        <header>Featured Items</header>
        <section class="featured-products">
            @{
                if (this.Model.Any(category => category.Products?.Count() > 0))
                {
                    var products = this.Model.FirstOrDefault(category => category.Products?.Count() > 0).Products;

                    foreach (var product in products)
                    {
                        @: @this.Html.Partial("_ProductPartialTemplate", product)
                    }
                }
                else
                {
                    @: <p class="p-1 text-center">No Products found for this category. Or on this page.</p>
                }
            }
        </section>
        @this.Html.Partial("_PaggingPartial")
    </section>
</section>

@section templates {
    <script id="add-product-form-template" type="text/html">
        @this.Html.Partial("_FormPartial", new ProductCreateModel())
    </script>

    <script id="product-container-template" type="text/html">
        @this.Html.Partial("_ProductPartialTemplate", new ProductViewModel())
    </script>

    <script id="create-category-form-template" type="text/html">
        @this.Html.Partial("_CreateCategoryFormPartial", new CategoryInputModel())
    </script>
}

@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        $(function () {
            var _this = this;

            @if (this.User.Identity.IsAuthenticated && this.User.IsInRole(RolesConstants.Administrator))
            {
               @: $("[shop-action='add-product']").on("click", function() {
               @:   var template = $("#add-product-form-template").html();

               @:   var modalButtons = [
               @:   {
               @:        Name: "Add",
               @:        onClick: function() {
               @:           var $form = $(".custom-modal").find(".modal-body").find(".modal-form");
               @:           $form.submit();
               @:        }
               @:   }];

               @:   modalFunctions.openModal("Add Product", template, modalButtons);

               @:   var categoryId = $(this).parent().children("a[shop-role-id]");

               @:   var $categoryIdInput = $(".custom-modal").find(".modal-body").find("#CategoryId");

               @:   $categoryIdInput.attr("value", $(categoryId).attr("shop-role-id"));
               @: });
            }
            // providing the id for the product details modal
            var productDetailsButtons = $("[shop-action='product-details']");
            productDetailsButtons.on("click", function (e) {
                e.preventDefault();

                var productId = $(this).closest("[shop-product-id]").attr("shop-product-id");
                var buttons = [
                    @if (this.User.Identity.IsAuthenticated && this.User.IsInRole(RolesConstants.Administrator))
                    {
                        @:{
                        @:    Name: "Edit",
                        @:    onClick: editProductFunctionality
                        @:}
                    }
                ];

                modalFunctions.openProductDetailsDialog(productId, buttons);
            });

            @if(this.User.Identity.IsAuthenticated && this.User.IsInRole(RolesConstants.Administrator))
             {
             @:     $("#create-category, [shop-action='edit-category']").on("click", function(e) {
             @:        var template = $("#create-category-form-template").html();

             @:        var modalButtons = [
             @:        {
             @:            Name: "Create",
             @:            onClick: function () {
             @:                var $form = $(".custom-modal").find(".modal-body").find(".modal-form");
             @:                $form.submit();
             @:            }
             @:        }];

             @:        if ($(e.currentTarget).attr("shop-action") === "edit-category") {
             @:            var categoryId = $(this).parent().find("[shop-role-id]").attr("shop-role-id");

             @:            $.ajax({
             @:                url: "/api/CategoryApi/Get/" + categoryId,
             @:                method: "GET"
             @:            }).then(function (category) {
             @:                modalButtons[0].Name = "Edit";
             @:                modalFunctions.openModal("Create Category", template, modalButtons);

             @:                $(".custom-modal .modal-form").attr("action", "@this.Url.Action("Edit", "Category")");
             @:                $(".custom-modal .modal-form").append("<input id='Id' name='Id' type='hidden' value='" + category.Id + "'/>")
             @:                $(".custom-modal #Name").attr("value", category.Name);
             @:                $(".custom-modal #CoverUrl").attr("value", category.CoverUrl);
             @:            });

             @:        } else {
             @:            modalFunctions.openModal("Create Category", template, modalButtons);
             @:        }

             @:    });
            }

            @* attaching the edit product functionality *@
            @if (this.User.IsInRole(RolesConstants.Administrator))
            {
                @: var editProductFunctionality = function() {
                @:  var template = $("#add-product-form-template").html();

                @:  var $modal = $(this).closest(".custom-modal");
                @:  var productId = $modal.find("[shop-product-id]").attr("shop-product-id");
                @:  var productName = $modal.find("[shop-product-name]").attr("shop-product-name");
                @:  var productPrice = $modal.find("[shop-product-price]").attr("shop-product-price");
                @:  var productCoverURL = $modal.find("[shop-product-cover-url]").attr("src");
                @:  var productCategoryId = $modal.find("[shop-product-category-id]").attr("shop-product-category-id");
                @:  var productDescription = $modal.find("[shop-product-description]").text().trim();

                @:  var selectWrapper = $("<div><label for='CategoryId'>Choose a category</label></div>");
                @:  var categoriesList = $("<select id='CategoryId' name='CategoryId' class='shop-select w-100'></select>");
                @:  var categories = $(".categories-list [shop-role-id]").each(function (index, element) {

                @:    var option = $("<option></option>");
                @:    option.attr("value", $(element).attr("shop-role-id"));
                @:    option.text($(element).text());

                @:    if (productCategoryId === $(element).attr("shop-role-id")) {
                @:      option.attr("selected", "selected");
                @:    }

                @:    categoriesList.append(option);
                @:  });
                @:
                @:  selectWrapper.append(categoriesList);
                @:

                @:  var modalButtons = [
                @:    {
                @:        Name: "Edit",
                @:        onClick: function () {
                @:            var $form = $(".custom-modal").find(".modal-body").find(".modal-form");
                @:            $form.submit();
                @:        }
                @:    }
                @:  ];

                @:    modalFunctions.openModal("Edit Product", template, modalButtons);

                @:    var $form = $(".custom-modal .modal-form");
                @:    $form.attr("action", "@this.Url.Action("Edit", "Product")");
                @:    $form.find("#Name").attr("value", productName);
                @:    $form.find("#Description").text(productDescription);
                @:    $form.find("#Price").attr("value", productPrice);
                @:    $form.find("#CoverUrl").attr("value", productCoverURL);
                @:    $form.find("#CategoryId").attr("value", productCategoryId)
                @:    $form.append(selectWrapper);
                @:    $form.append("<input id='Id' name='Id' type='hidden' value='" + productId + "' />");
                @: }
            }

            // adding the order to the session storage
            var orderButtons = $("[shop-action='order-product']");
            orderButtons.on("click", function () {
                // show error when not
                @if (!this.User.Identity.IsAuthenticated)
                {
                    @: window.location.href = "@this.Url.Action("Login", "Account")"
                }
                else
                {
                    @:  var callback = function (e) {
                    @:      var productQuantity = $(this).closest(".product-container").find("[shop-product-quantity]").val();
                    @:      var productId = $(this).closest(".product-container").attr("shop-product-id");
                    @:      var productName = $(this).closest(".product-container").find("[shop-product-name]").attr("shop-product-name");
                    @:      var productPrice = $(this).closest(".product-container").find("[shop-product-price]").attr("shop-product-price");

                    @:      if (parseInt(productQuantity) > 0)
                    @:      {
                    @:        window.sessionStorage.setItem(productName, JSON.stringify({ quantity: productQuantity, productId: productId, price: productPrice }));
                    @:      }

                    @:      $(".banner-order-information i").text(window.sessionStorage.length);
                    @:      $(".custom-modal").find("[close-modal-btn]").click();

                    @:      // clearing the quantity after ordering
                    @:      $(this).closest(".product-container").find("[shop-product-quantity]").val("");
                    @:  };

                    @: modalFunctions.openConfirmationModal(callback.bind(this));
                }
            });

            @* Adding the delete product functionality *@
            @if (this.User.IsInRole(RolesConstants.Administrator))
            {
                @:$(".product-container").find("[shop-action='remove-product']").on("click", function (e) {
                @:  var productContainer = $(e.currentTarget).closest("[shop-product-id]");
                @:  var productId = productContainer.attr("shop-product-id");

                @: var callback = function (productId) {
                @:     $.ajax({
                @:         url: "/Product/Delete/" + productId,
                @:         method: "GET"
                @:     }).then(function () {
                @:         productContainer.fadeOut(1000);
                @:         setTimeout(function () {
                @:             productContainer.remove();
                @:         }, 1000);
                @*      TODO [GM]: Reload is neccassery? *@
                @:         window.location.reload();
                @:     });
                @: };

                @: modalFunctions.openConfirmationModal(callback.bind(this, [productId]));

                @:});
            }
        });
    </script>
}