@model IEnumerable<CategoryViewModel>

<section class="products-wrapper">
    <section class="products-wrapper-admin-toolbar">
        @if (this.User.Identity.IsAuthenticated)
        {
            if (this.User.IsInRole(RolesConstants.Administrator))
            {
                <button id="create-category" class="ui-button ui-widget ui-corner-all" type="button">Create</button>
            }
        }
    </section>
    <section class="product-categories">
        <header>Category</header>
        <section class="categories-list">
            <ul>
                @foreach (var category in this.Model)
                {
                    <li>@Html.Partial("_CategoryPartial", category)</li>
                }
            </ul>
        </section>
    </section>
    <section class="product-items">
        <header>Featured Items</header>
        <section class="featured-products">
            @{
                if (this.Model.Any(category => category.Products?.Count() > 0))
                {
                    var products = this.Model.FirstOrDefault(category => category.Products?.Count() > 0).Products;

                    foreach (var product in products)
                    {
                        @: @Html.Partial("_ProductPartialTemplate", product)
                    }

                }
                else
                {
                    @: <p class="p-1 text-center">No Products found for this category. Or on this page.</p>
                }
            }
        </section>
        @Html.Partial("_ProductsPaggingPartial")
    </section>
</section>

<div id="confirm-order" title="Confirm Order">
    @Html.Partial("_ConfirmationPartial")
</div>

<div id="product-details-dialog" title="Product Details">

</div>

@if (this.User.Identity.IsAuthenticated)
{
    if (this.User.IsInRole(RolesConstants.Administrator))
    {
        <div id="create-category-form-wrapper" title="Create Category"></div>

        <div id="add-product-form-wrapper" title="Add a Product"></div>
    }
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script id="product-details-template" type="text/html">
        @Html.Partial("_ProductDetailsPartialTemplate")
    </script>

    <script id="add-product-form-template" type="text/html">
        @Html.Partial("_AddProductFormPartial", new ProductInputModel())
    </script>

    <script id="product-container-template" type="text/html">
        @Html.Partial("_ProductPartialTemplate", new ProductViewModel())
    </script>

    <script id="create-category-form-template" type="text/html">
        @Html.Partial("_CreateCategoryFormPartial", new CategoryInputModel())
    </script>

    <script src="~/scripts/common/product-details.js" type="text/javascript"></script>

    <script type="text/javascript">
        $(function () {
            // add product form
            var addProductFormDialog = $("#add-product-form-wrapper");

            addProductFormDialog.dialog({
                autoOpen: false,
                height: 650,
                width: 500,
                modal: true,
                show: {
                    effect: "blind",
                    duration: 500
                },
                hide: {
                    effect: "explode",
                    duration: 500
                },
                buttons: {
                    Create: function () {
                        var $form = $("#add-product-form-wrapper .modal-form");
                        $form.submit();
                    },
                    Cancel: function () {
                        @* Reseting the form values *@
                        var $addProductForm = $("#add-product-form-wrapper > form");
                        $addProductForm[0].reset();

                        addProductFormDialog.dialog("close");
                    }
                },
                close: function () {
                    @* Reseting the form values *@
                    var $addProductForm = $("#add-product-form-wrapper > form");
                    $addProductForm[0].reset();
                }
            });

            $("[shop-action='add-product']").button().on("click", function () {
                var template = $("#add-product-form-template").html();
                $("#add-product-form-wrapper").html(template);

                var $form = $(".modal-form");
                $.validator.unobtrusive.parse($form);

                var categoryId = $(this).parent().children("a[shop-role-id]");

                var $categoryIdInput = $("#add-product-form-wrapper #CategoryId");

                $categoryIdInput.attr("value", $(categoryId).attr("shop-role-id"));

                // showing the form
                addProductFormDialog.dialog("open");
            });

            // confirm order popup
            var confirmOrderDialog = $("#confirm-order");

            confirmOrderDialog.dialog({
                autoOpen: false,
                height: 200,
                width: 400,
                modal: true,
                show: {
                    effect: "blind",
                    duration: 500
                },
                hide: {
                    effect: "explode",
                    duration: 500
                },
                buttons: {
                    Confirm: function () {
                        var productQuantity = $(this).attr("shop-product-quantity");
                        var productId = $(this).attr("shop-product-id");
                        var productName = $(this).attr("shop-product-name");
                        var productPrice = $(this).parent().parent().find("[shop-product-price]").attr("shop-product-price");

                        if (productQuantity > 0) {
                            window.sessionStorage.setItem(productName, JSON.stringify({ quantity: productQuantity, productId: productId, price: productPrice }));
                        }

                        $(".banner-order-information i").text(window.sessionStorage.length);

                        confirmOrderDialog.dialog("close");
                    },
                    Cancel: function () {
                        confirmOrderDialog.dialog("close");
                    }
                }
            });

            // create category form
            var createCategoryFormDialog = $("#create-category-form-wrapper");

            createCategoryFormDialog.dialog({
                autoOpen: false,
                height: 400,
                width: 350,
                modal: true,
                show: {
                    effect: "blind",
                    duration: 500
                },
                hide: {
                    effect: "explode",
                    duration: 500
                },
                buttons: {
                    Create: function () {
                        var $form = $("#create-category-form-wrapper .modal-form");
                        $form.submit()
                    },
                    Cancel: function () {
                        @* reseting the add category form *@
                        var $addCategoryForm = $("#create-category-form-wrapper > form");
                        $addCategoryForm[0].reset();

                        createCategoryFormDialog.dialog("close");
                    }
                },
                close: function () {
                    @* reseting the add category form *@
                    var $addCategoryForm = $("#create-category-form-wrapper > form");
                    $addCategoryForm[0].reset();
                }
            });

            $("#create-category, [shop-action='edit-category']").button().on("click", function (e) {
                var template = $("#create-category-form-template").html();
                createCategoryFormDialog.html(template);

                var $form = $(".modal-form");
                $.validator.unobtrusive.parse($form);

                if ($(e.currentTarget).attr("shop-action") === "edit-category") {
                    var categoryId = $(this).parent().find("[shop-role-id]").attr("shop-role-id");
                    
                    createCategoryFormDialog.find(".modal-form").attr("action", "@Url.Action("Edit", "Category")");

                    $.ajax({
                        url: "/Category/Get/" + categoryId,
                        method: "GET"
                    }).then(function (category) {
                        createCategoryFormDialog.dialog("open");

                        $("#create-category-form-wrapper .modal-form").append("<input id='Id' name='Id' type='hidden' value='" + category.Id + "'/>")
                        $("#create-category-form-wrapper #Name").attr("value", category.Name);
                        $("#create-category-form-wrapper #CoverUrl").attr("value", category.CoverUrl);
                    });

                } else {
                    createCategoryFormDialog.dialog("open");
                }

            });

            @* attaching the edit product functionality *@
            @if (this.User.IsInRole(RolesConstants.Administrator))
            {
                @: var editProductFunctionality = function() {
                @:    var template = $("#add-product-form-template").html();
                @:    var $addProductForm = $("#add-product-form-wrapper").html(template);

                @:    var $form = $(".modal-form");
                @:    $.validator.unobtrusive.parse($form);

                @:    var productId = $(this).parent().find("[shop-product-id]").attr("shop-product-id");
                @:    var productName = $(this).parent().find("[shop-product-name]").text();
                @:    var productPrice = $(this).parent().find("[shop-product-price]").text();
                @:    var productCoverURL = $(this).parent().find("[shop-product-cover-url]").attr("src");
                @:    var productCategoryId = $(this).parent().find("[shop-product-category-id]").attr("shop-product-category-id");
                @:    var productDescription = $(this).parent().find("[shop-product-description]").text().trim();
                @:   
                @:    $addProductForm.prev().find(".ui-dialog-title").text("Edit Product");
                @:    $addProductForm.next().find("button").first().text("Edit")
                @:   
                @:    $addProductForm.find("#Name").attr("value", productName);
                @:    $addProductForm.find("#Description").text(productDescription);
                @:    $addProductForm.find("#Price").attr("value", productPrice);
                @:    $addProductForm.find("#CoverUrl").attr("value", productCoverURL);
                @:    $addProductForm.find("#CategoryId").attr("value", productCategoryId)
                @:    $addProductForm.find(".modal-form").append("<input id='Id' name='Id' type='hidden' value='" + productId + "' />");

                @:    addProductFormDialog.dialog("open");
                @: }

                @: productDetailsDialog.dialog("option", "buttons", { Edit: editProductFunctionality, Cancel: function () { productDetailsDialog.dialog("close"); }} );
            }

            // adding the order to the session storage
            var orderButtons = $("[shop-action='order-product']");
            orderButtons.on("click", function () {
                // show error when not
                @if (!this.User.Identity.IsAuthenticated)
                {
                    @: window.location.href = "@Url.Action("Login", "Account")"
                }
                else
                {
                    @:var productQuantity = $(this).parent().parent().find("[shop-product-quantity]");
                    @:var productId = $(this).closest("[shop-product-id]").attr("shop-product-id");
                    @:var productName = $(this).parent().parent().find("[shop-product-name]").attr("shop-product-name");

                    @:confirmOrderDialog.attr("shop-product-id", productId);
                    @:confirmOrderDialog.attr("shop-product-name", productName);
                    @:confirmOrderDialog.attr("shop-product-quantity", productQuantity.val() > 0 ? productQuantity.val() : 0);

                    @:confirmOrderDialog.dialog("open");

                    // emptying the quantity input
                    @:productQuantity.val("");
                }

            });
        });
    </script>
}